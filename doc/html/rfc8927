<!DOCTYPE html> 

<!-- template: /a/www/ietf-datatracker/web/ietf/templates/doc/htmlized_base.html -->
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>
  
    rfc8927
  
</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>

  @media only screen 
    and (min-width: 992px)
    and (max-width: 1199px) {
      body { font-size: 14pt; }
            div.content { width: 96ex; margin: 0 auto; }
        }
  @media only screen 
    and (min-width: 768px)
    and (max-width: 991px) {
            body { font-size: 14pt; }
            div.content { width: 96ex; margin: 0 auto; }
        }
  @media only screen 
    and (min-width: 480px)
    and (max-width: 767px) {
            body { font-size: 11pt; }
            div.content { width: 96ex; margin: 0 auto; }
        }
  @media only screen 
    and (max-width: 479px) {
            body { font-size: 8pt; }
            div.content { width: 96ex; margin: 0 auto; }
        }
  @media only screen 
    and (min-device-width : 375px) 
    and (max-device-width : 667px) {
            body { font-size: 9.5pt; }
            div.content { width: 96ex; margin: 0; }
        }
  @media only screen 
    and (min-device-width: 1200px) {
            body { font-size: 10pt; margin: 0 4em; }
            div.content { width: 96ex; margin: 0; }
        }
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
      font-weight: bold;
            /* line-height: 0pt; */
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
      font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
  .pre {
      white-space: pre;
      font-family: monospace;
  }
  .header{
      font-weight: bold;
  }
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        @media print {
            body {
                margin-top: 5em;
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
  @media screen {
      .grey, .grey a:link, .grey a:visited {
    color: #777;
      }
            .meta-info {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .pad {
                padding-top: 7px;
                line-height: 24px;
                padding-bottom: 4px;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
  }
    
     

.bgwhite  { background-color: white; }
.bgred    { background-color: #F44; }
.bggrey   { background-color: #666; }
.bgbrown  { background-color: #840; }            
.bgorange { background-color: #FA0; }
.bgyellow { background-color: #EE0; }
.bgmagenta{ background-color: #F4F; }
.bgblue   { background-color: #66F; }
.bgcyan   { background-color: #4DD; }
.bggreen  { background-color: #4F4; }

.draftcontent { margin-top:0px !important;}


    </style>

    <!--[if lt IE 9]>
        <script src="https://www.ietf.org/lib/dt/7.33.0/html5shiv/html5shiv.min.js"></script>
        <script src="https://www.ietf.org/lib/dt/7.33.0/respond/dest/respond.min.js"></script>
    <![endif]-->
    
  <link rel="alternate" type="application/atom+xml" title="Document changes" href="/feed/document-changes/draft-ucarion-json-type-definition/">
  <meta name="description" content="JSON Type Definition (RFC )">
  <script src="https://www.ietf.org/lib/dt/7.33.0/d3/d3.min.js"></script>
  <script src="https://www.ietf.org/lib/dt/7.33.0/jquery/jquery.min.js"></script>


    
    <link rel="shortcut icon" href="https://www.ietf.org/lib/dt/7.33.0/ietf/images/ietf-icon-blue3.png">
    
    <link rel="apple-touch-icon" href="https://www.ietf.org/lib/dt/7.33.0/ietf/images/apple-touch-icon.png">
  </head>

  <body style="padding-top: 0;">

	  <div class="content" id="content">
        
  <!-- template: /a/www/ietf-datatracker/web/ietf/templates/doc/document_html.html -->
 
  <div class="rfcmarkup">
    <div class="noprint" style="height: 6px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showLegend();"
         onmouseout="hideLegend()"
         style="height: 6px; min-height: 6px; width: 96ex; position: absolute; margin-top:0; "
         class="meta-info bgyellow"
         title="Click for colour legend." >&nbsp;</div>
      <div id="legend"
           class="meta-info noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showLegend();"
           onmouseout="hideLegend();">
      </div>
    </div>

    
      <div class="noprint">
	 <pre class="pre meta-info">[<a href="https://datatracker.ietf.org" title="Document search and retrieval page">Search</a>] [<a href="https://www.rfc-editor.org/rfc/rfc8927.txt" title="Plaintext version of this document">txt</a>|<a href="https://www.rfc-editor.org/rfc/rfc8927.html" title="HTML version of this document, from XML2RFC">html</a>|<a href="https://www.rfc-editor.org/rfc/rfc8927.xml" title="XML source for this document">xml</a>|<a href="https://www.rfc-editor.org/rfc/rfc8927.pdf" title="PDF version of this document">pdf</a>|<a href="/doc/rfc8927/bibtex" title="BibTex entry for this document">bibtex</a>] [<a href="/doc/rfc8927/" title="Datatracker information for this document">Tracker</a>] [<a href="mailto:draft-ucarion-json-type-definition@ietf.org?subject=draft-ucarion-json-type-definition" title="Send email to the document authors">Email</a>] [<a href="https://www.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ucarion-json-type-definition-04.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="https://www.ietf.org/rfcdiff?url2=draft-ucarion-json-type-definition-04.txt" title="Side-by-side diff">Diff2</a>] [<a href="https://www.ietf.org/tools/idnits?url=https://www.ietf.org/archive/id/draft-ucarion-json-type-definition-04.txt" title="Run an idnits check of this document">Nits</a>]

From: <a href="/doc/html/draft-ucarion-json-type-definition-04">draft-ucarion-json-type-definition-04</a>                 Experimental</pre>
      </div>
    

    <div class="draftcontent">
    <pre>Independent Submission                                         U. Carion
Request for Comments: 8927                                       Segment
Category: Experimental                                     November 2020
ISSN: 2070-1721


                          <span class="h1">JSON Type Definition</span>

Abstract

   This document proposes a format, called JSON Type Definition (JTD),
   for describing the shape of JavaScript Object Notation (JSON)
   messages.  Its main goals are to enable code generation from schemas
   as well as portable validation with standardized error indicators.
   To this end, JTD is intentionally limited to be no more expressive
   than the type systems of mainstream programming languages.  This
   intentional limitation, as well as the decision to make JTD schemas
   be JSON documents, makes tooling atop of JTD easier to build.

   This document does not have IETF consensus and is presented here to
   facilitate experimentation with the concept of JTD.

Status of This Memo

   This document is not an Internet Standards Track specification; it is
   published for examination, experimental implementation, and
   evaluation.

   This document defines an Experimental Protocol for the Internet
   community.  This is a contribution to the RFC Series, independently
   of any other RFC stream.  The RFC Editor has chosen to publish this
   document at its discretion and makes no statement about its value for
   implementation or deployment.  Documents approved for publication by
   the RFC Editor are not candidates for any level of Internet Standard;
   see <a href="/doc/html/rfc7841#section-2">Section&nbsp;2 of RFC 7841</a>.

   Information about the current status of this document, any errata,
   and how to provide feedback on it may be obtained at
   <a href="https://www.rfc-editor.org/info/rfc8927">https://www.rfc-editor.org/info/rfc8927</a>.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="/doc/html/bcp78">BCP 78</a> and the IETF Trust&#x27;s Legal
   Provisions Relating to IETF Documents
   (<a href="https://trustee.ietf.org/license-info">https://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.

Table of Contents

   1.  Introduction
     1.1.  Terminology
     1.2.  Scope of Experiment
   2.  Syntax
     2.1.  Root vs. Non-root Schemas
     2.2.  Forms
       2.2.1.  Empty
       2.2.2.  Ref
       2.2.3.  Type
       2.2.4.  Enum
       2.2.5.  Elements
       2.2.6.  Properties
       2.2.7.  Values
       2.2.8.  Discriminator
     2.3.  Extending JTD&#x27;s Syntax
   3.  Semantics
     3.1.  Allowing Additional Properties
     3.2.  Errors
     3.3.  Forms
       3.3.1.  Empty
       3.3.2.  Ref
       3.3.3.  Type
       3.3.4.  Enum
       3.3.5.  Elements
       3.3.6.  Properties
       3.3.7.  Values
       3.3.8.  Discriminator
   4.  IANA Considerations
   5.  Security Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   <a href="#appendix-A">Appendix A</a>.  Rationale for Omitted Features
     A.1.  Support for 64-Bit Numbers
     A.2.  Support for Non-root Definitions
   <a href="#appendix-B">Appendix B</a>.  Comparison with CDDL
   <a href="#appendix-C">Appendix C</a>.  Example
   Acknowledgments
   Author&#x27;s Address

<span class="h2"><a class="selflink" id="section-1" href="#section-1">1</a>.  Introduction</span>

   This document describes a schema language for JSON [<a href="/doc/html/rfc8259" title="&quot;The JavaScript Object Notation (JSON) Data Interchange Format&quot;">RFC8259</a>] called
   JSON Type Definition (JTD).

   There exist many options for describing JSON data.  JTD&#x27;s niche is to
   focus on enabling code generation from schemas; to this end, JTD&#x27;s
   expressiveness is intentionally limited to be no more powerful than
   what can be expressed in the type systems of mainstream programming
   languages.

   The goals of JTD are to:

   *  Provide an unambiguous description of the overall structure of a
      JSON document.

   *  Be able to describe common JSON data types and structures (that
      is, the data types and structures necessary to support most JSON
      documents and that are widely understood in an interoperable way
      by JSON implementations).

   *  Provide a single format that is readable and editable by both
      humans and machines and that can be embedded within other JSON
      documents.  This makes JTD a convenient format for tooling to
      accept as input or produce as output.

   *  Enable code generation from JTD schemas.  JTD schemas are meant to
      be easy to convert into data structures idiomatic to mainstream
      programming languages.

   *  Provide a standardized format for error indicators when data does
      not conform with a schema.

   JTD is intentionally designed as a rather minimal schema language.
   Thus, although JTD can describe some categories of JSON, it is not
   able to describe its own structure; this document uses Concise Data
   Definition Language (CDDL) [<a href="/doc/html/rfc8610" title="&quot;Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures&quot;">RFC8610</a>] to describe JTD&#x27;s syntax.  By
   keeping the expressiveness of the schema language minimal, JTD makes
   code generation and standardized error indicators easier to
   implement.

   Examples in this document use constructs from the C++ programming
   language.  These examples are provided to aid the reader in
   understanding the principles of JTD but are not limiting in any way.

   JTD&#x27;s feature set is designed to represent common patterns in JSON-
   using applications, while still having a clear correspondence to
   programming languages in widespread use.  Thus, JTD supports:

   *  Signed and unsigned 8-, 16-, and 32-bit integers.  A tool that
      converts JTD schemas into code can use &quot;int8_t&quot;, &quot;uint8_t&quot;,
      &quot;int16_t&quot;, etc., or their equivalents in the target language, to
      represent these JTD types.

   *  A distinction between &quot;float32&quot; and &quot;float64&quot;.  Code generators
      can use &quot;float&quot; and &quot;double&quot;, or their equivalents, for these JTD
      types.

   *  A &quot;properties&quot; form of JSON objects, corresponding to some sort of
      struct or record.  The &quot;properties&quot; form of JSON objects is akin
      to a C++ &quot;struct&quot;.

   *  A &quot;values&quot; form of JSON objects, corresponding to some sort of
      dictionary or associative array.  The &quot;values&quot; form of JSON
      objects is akin to a C++ &quot;std::map&quot;.

   *  A &quot;discriminator&quot; form of JSON objects, corresponding to a
      discriminated (or &quot;tagged&quot;) union.  The &quot;discriminator&quot; form of
      JSON objects is akin to a C++ &quot;std::variant&quot;.

   The principle of common patterns in JSON is why JTD does not support
   64-bit integers, as these are usually transmitted over JSON in non-
   interoperable (i.e., ignoring the recommendations in <a href="/doc/html/rfc7493#section-2.2">Section&nbsp;2.2 of
   [RFC7493]</a>) or mutually inconsistent ways.  <a href="#appendix-A.1">Appendix A.1</a> further
   elaborates on why JTD does not support 64-bit integers.

   The principle of clear correspondence to common programming languages
   is why JTD does not support, for example, a data type for integers up
   to 2**53-1.

   It is expected that for many use cases, a schema language of JTD&#x27;s
   expressiveness is sufficient.  Where a more expressive language is
   required, alternatives exist in CDDL and others.

   This document does not have IETF consensus and is presented here to
   facilitate experimentation with the concept of JTD.  The purpose of
   the experiment is to gain experience with JTD and to possibly revise
   this work accordingly.  If JTD is determined to be a valuable and
   popular approach, it may be taken to the IETF for further discussion
   and revision.

   This document has the following structure.  <a href="#section-2">Section 2</a> defines the
   syntax of JTD.  <a href="#section-3">Section 3</a> describes the semantics of JTD; this
   includes determining whether some data satisfies a schema and what
   error indicators should be produced when the data is unsatisfactory.
   <a href="#appendix-A">Appendix A</a> discusses why certain features are omitted from JTD.
   <a href="#appendix-B">Appendix B</a> presents various JTD schemas and their CDDL equivalents.

<span class="h3"><a class="selflink" id="section-1.1" href="#section-1.1">1.1</a>.  Terminology</span>

   The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
   &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and
   &quot;OPTIONAL&quot; in this document are to be interpreted as described in
   <a href="/doc/html/bcp14">BCP 14</a> [<a href="/doc/html/rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>] [<a href="/doc/html/rfc8174" title="&quot;Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words&quot;">RFC8174</a>] when, and only when, they appear in all
   capitals, as shown here.

   The term &quot;JSON Pointer&quot;, when it appears in this document, is to be
   understood as it is defined in [<a href="/doc/html/rfc6901" title="&quot;JavaScript Object Notation (JSON) Pointer&quot;">RFC6901</a>].

   The terms &quot;object&quot;, &quot;member&quot;, &quot;array&quot;, &quot;number&quot;, &quot;name&quot;, and &quot;string&quot;
   in this document are to be interpreted as described in [<a href="/doc/html/rfc8259" title="&quot;The JavaScript Object Notation (JSON) Data Interchange Format&quot;">RFC8259</a>].

   The term &quot;instance&quot;, when it appears in this document, refers to a
   JSON value being validated against a JTD schema.  This value can be
   an entire JSON document, or it can be a value embedded within a JSON
   document.

<span class="h3"><a class="selflink" id="section-1.2" href="#section-1.2">1.2</a>.  Scope of Experiment</span>

   JTD is an experiment.  Participation in this experiment consists of
   using JTD to validate or document interchanged JSON messages or
   building tooling atop of JTD.  Feedback on the results of this
   experiment may be emailed to the author.  Participants in this
   experiment are anticipated to mostly be nodes that provide or consume
   JSON-based APIs.

   Nodes know if they are participating in the experiment if they are
   validating JSON messages against a JTD schema or if they are relying
   on another node to do so.  Nodes are also participating in the
   experiment if they are running code generated from a JTD schema.

   The risk of this experiment &quot;escaping&quot; takes the form of a JTD-
   supporting node expecting another node, which lacks such support, to
   validate messages against some JTD schema.  In such a case, the
   outcome will likely be that the nodes fail to interchange information
   correctly.

   This experiment will be deemed successful when JTD has been
   implemented by multiple independent parties and these parties
   successfully use JTD to facilitate information interchange within
   their internal systems or between systems operated by independent
   parties.

   If this experiment is deemed successful, and JTD is determined to be
   a valuable and popular approach, it may be taken to the IETF for
   further discussion and revision.  One possible outcome of this
   discussion and revision could be that a working group produces a
   Standards Track specification of JTD.

   Some implementations of JTD, as well as code generators and other
   tooling related to JTD, are available at &lt;<a href="https://github.com/jsontypedef">https://github.com/</a>
   <a href="https://github.com/jsontypedef">jsontypedef</a>&gt;.

<span class="h2"><a class="selflink" id="section-2" href="#section-2">2</a>.  Syntax</span>

   This section describes when a JSON document is a correct JTD schema.
   Because Concise Data Definition Language (CDDL) is well suited to the
   task of defining complex JSON formats, such as JTD schemas, this
   section uses CDDL to describe the format of JTD schemas.

   JTD schemas may recursively contain other schemas.  In this document,
   a &quot;root schema&quot; is one that is not contained within another schema,
   i.e., it is &quot;top level&quot;.

   A JTD schema is a JSON object taking on an appropriate form.  JTD
   schemas may contain &quot;additional data&quot;, discussed in <a href="#section-2.3">Section 2.3</a>.
   Root JTD schemas may optionally contain definitions (a mapping from
   names to schemas).

   A correct root JTD schema MUST match the &quot;root-schema&quot; CDDL rule
   described in this section.  A correct non-root JTD schema MUST match
   the &quot;schema&quot; CDDL rule described in this section.

   ; root-schema is identical to schema, but additionally allows for
   ; definitions.
   ;
   ; definitions are prohibited from appearing on non-root schemas.
   root-schema = {
     ? definitions: { * tstr =&gt; { schema}},
     schema,
   }
   ; schema is the main CDDL rule defining a JTD schema.
   ;
   ; All JTD schemas are JSON objects taking on one of eight forms
   ; listed here.
   schema = (
     ref //
     type //
     enum //
     elements //
     properties //
     values //
     discriminator //
     empty //
   )
   ; shared is a CDDL rule containing properties that all eight schema
   ; forms share.
   shared = (
     ? metadata: { * tstr =&gt; any },
     ? nullable: bool,
   )
   ; empty describes the &quot;empty&quot; schema form.
   empty = shared
   ; ref describes the &quot;ref&quot; schema form.
   ;
   ; There are additional constraints on this form that cannot be
   ; expressed in CDDL. <a href="#section-2.2.2">Section 2.2.2</a> describes these additional
   ; constraints in detail.
   ref = ( ref: tstr, shared )
   ; type describes the &quot;type&quot; schema form.
   type = (
     type: &quot;boolean&quot;
       / &quot;float32&quot;
       / &quot;float64&quot;
       / &quot;int8&quot;
       / &quot;uint8&quot;
       / &quot;int16&quot;
       / &quot;uint16&quot;
       / &quot;int32&quot;
       / &quot;uint32&quot;
       / &quot;string&quot;
       / &quot;timestamp&quot;,
     shared,
   )
   ; enum describes the &quot;enum&quot; schema form.
   ;
   ; There are additional constraints on this form that cannot be
   ; expressed in CDDL. <a href="#section-2.2.4">Section 2.2.4</a> describes these additional
   ; constraints in detail.
   enum = ( enum: [+ tstr], shared )
   ; elements describes the &quot;elements&quot; schema form.
   elements = ( elements: { schema }, shared )
   ; properties describes the &quot;properties&quot; schema form.
   ;
   ; This CDDL rule is defined so that a schema of the &quot;properties&quot; form
   ; may omit a member named &quot;properties&quot; or a member named
   ; &quot;optionalProperties&quot;, but not both.
   ;
   ; There are additional constraints on this form that cannot be
   ; expressed in CDDL. <a href="#section-2.2.6">Section 2.2.6</a> describes these additional
   ; constraints in detail.
   properties = (with-properties // with-optional-properties)
   with-properties = (
     properties: { * tstr =&gt; { schema }},
     ? optionalProperties: { * tstr =&gt; { schema }},
     ? additionalProperties: bool,
     shared,
   )
   with-optional-properties = (
     ? properties: { * tstr =&gt; { schema }},
     optionalProperties: { * tstr =&gt; { schema }},
     ? additionalProperties: bool,
     shared,
   )
   ; values describes the &quot;values&quot; schema form.
   values = ( values: { schema }, shared )
   ; discriminator describes the &quot;discriminator&quot; schema form.
   ;
   ; There are additional constraints on this form that cannot be
   ; expressed in CDDL. <a href="#section-2.2.8">Section 2.2.8</a> describes these additional
   ; constraints in detail.
   discriminator = (
     discriminator: tstr,
     ; Note well: this rule is defined in terms of the &quot;properties&quot;
     ; CDDL rule, not the &quot;schema&quot; CDDL rule.
     mapping: { * tstr =&gt; { properties } }
     shared,
   )

                   Figure 1: CDDL Definition of a Schema

   The remainder of this section will describe constraints on JTD
   schemas that cannot be expressed in CDDL.  It will also provide
   examples of valid and invalid JTD schemas.

<span class="h3"><a class="selflink" id="section-2.1" href="#section-2.1">2.1</a>.  Root vs. Non-root Schemas</span>

   The &quot;root-schema&quot; rule in Figure 1 permits a member named
   &quot;definitions&quot;, but the &quot;schema&quot; rule does not permit for such a
   member.  This means that only root (i.e., &quot;top-level&quot;) JTD schemas
   can have a &quot;definitions&quot; object, and subschemas may not.

   Thus,

      { &quot;definitions&quot;: {} }

   is a correct JTD schema, but

      {
        &quot;definitions&quot;: {
          &quot;foo&quot;: {
            &quot;definitions&quot;: {}
          }
        }
      }

   is not, because subschemas (such as the object at &quot;/definitions/foo&quot;)
   must not have a member named &quot;definitions&quot;.

<span class="h3"><a class="selflink" id="section-2.2" href="#section-2.2">2.2</a>.  Forms</span>

   JTD schemas (i.e., JSON objects satisfying the &quot;schema&quot; CDDL rule in
   Figure 1) must take on one of eight forms.  These forms are defined
   so as to be mutually exclusive; a schema cannot satisfy multiple
   forms at once.

<span class="h4"><a class="selflink" id="section-2.2.1" href="#section-2.2.1">2.2.1</a>.  Empty</span>

   The &quot;empty&quot; form is defined by the &quot;empty&quot; CDDL rule in Figure 1.
   The semantics of the &quot;empty&quot; form are described in <a href="#section-3.3.1">Section 3.3.1</a>.

   Despite the name &quot;empty&quot;, schemas of the &quot;empty&quot; form are not
   necessarily empty JSON objects.  Like schemas of any of the eight
   forms, schemas of the &quot;empty&quot; form may contain members named
   &quot;nullable&quot; (whose value must be &quot;true&quot; or &quot;false&quot;) or &quot;metadata&quot;
   (whose value must be an object) or both.

   Thus,

      {}

   and

      { &quot;nullable&quot;: true }

   and

      { &quot;nullable&quot;: true, &quot;metadata&quot;: { &quot;foo&quot;: &quot;bar&quot; }}

   are correct JTD schemas of the &quot;empty&quot; form, but

      { &quot;nullable&quot;: &quot;foo&quot; }

   is not, because the value of the member named &quot;nullable&quot; must be
   &quot;true&quot; or &quot;false&quot;.

<span class="h4"><a class="selflink" id="section-2.2.2" href="#section-2.2.2">2.2.2</a>.  Ref</span>

   The &quot;ref&quot; form is defined by the &quot;ref&quot; CDDL rule in Figure 1.  The
   semantics of the &quot;ref&quot; form are described in <a href="#section-3.3.2">Section 3.3.2</a>.

   For a schema of the &quot;ref&quot; form to be correct, the value of the member
   named &quot;ref&quot; must refer to one of the definitions found at the root
   level of the schema it appears in.  More formally, for a schema _S_
   of the &quot;ref&quot; form:

   *  Let _B_ be the root schema containing the schema or the schema
      itself if it is a root schema.

   *  Let _R_ be the value of the member of _S_ with the name &quot;ref&quot;.

   If the schema is correct, then _B_ MUST have a member _D_ with the
   name &quot;definitions&quot;, and _D_ MUST contain a member whose name equals
   _R_.

   Thus,

      {
        &quot;definitions&quot;: {
          &quot;coordinates&quot;: {
            &quot;properties&quot;: {
              &quot;lat&quot;: { &quot;type&quot;: &quot;float32&quot; },
              &quot;lng&quot;: { &quot;type&quot;: &quot;float32&quot; }
            }
          }
        },
        &quot;properties&quot;: {
          &quot;user_location&quot;: { &quot;ref&quot;: &quot;coordinates&quot; },
          &quot;server_location&quot;: { &quot;ref&quot;: &quot;coordinates&quot; }
        }
      }

   is a correct JTD schema and demonstrates the point of the &quot;ref&quot; form:
   to avoid redefining the same thing twice.  However,

      { &quot;ref&quot;: &quot;foo&quot; }

   is not a correct JTD schema, as there are no top-level &quot;definitions&quot;,
   and so the &quot;ref&quot; form cannot be correct.  Similarly,

      { &quot;definitions&quot;: { &quot;foo&quot;: {}}, &quot;ref&quot;: &quot;bar&quot; }

   is not a correct JTD schema, as there is no member named &quot;bar&quot; in the
   top-level &quot;definitions&quot;.

<span class="h4"><a class="selflink" id="section-2.2.3" href="#section-2.2.3">2.2.3</a>.  Type</span>

   The &quot;type&quot; form is defined by the &quot;type&quot; CDDL rule in Figure 1.  The
   semantics of the &quot;type&quot; form are described in <a href="#section-3.3.3">Section 3.3.3</a>.

   As an example of a correct JTD schema of the &quot;type&quot; form,

      { &quot;type&quot;: &quot;uint8&quot; }

   is a correct JTD schema, whereas

      { &quot;type&quot;: true }

   and

      { &quot;type&quot;: &quot;foo&quot; }

   are not correct schemas, as neither &quot;true&quot; nor the JSON string &quot;foo&quot;
   are in the list of permitted values of the &quot;type&quot; member described in
   the &quot;type&quot; CDDL rule in Figure 1.

<span class="h4"><a class="selflink" id="section-2.2.4" href="#section-2.2.4">2.2.4</a>.  Enum</span>

   The &quot;enum&quot; form is defined by the &quot;enum&quot; CDDL rule in Figure 1.  The
   semantics of the &quot;enum&quot; form are described in <a href="#section-3.3.4">Section 3.3.4</a>.

   For a schema of the &quot;enum&quot; form to be correct, the value of the
   member named &quot;enum&quot; must be a nonempty array of strings, and that
   array must not contain duplicate values.  More formally, for a schema
   _S_ of the &quot;enum&quot; form:

   *  Let _E_ be the value of the member of _S_ with name &quot;enum&quot;.

   If the schema is correct, then there MUST NOT exist any pair of
   elements of _E_ that encode equal string values, where string
   equality is defined as in <a href="/doc/html/rfc8259#section-8.3">Section&nbsp;8.3 of [RFC8259]</a>.

   Thus,

      { &quot;enum&quot;: [] }

   is not a correct JTD schema, as the value of the member named &quot;enum&quot;
   must be nonempty, and

      { &quot;enum&quot;: [&quot;a\\b&quot;, &quot;a\u005Cb&quot;] }

   is not a correct JTD schema, as

      &quot;a\\b&quot;

   and

      &quot;a\u005Cb&quot;

   encode strings that are equal by the definition of string equality
   given in <a href="/doc/html/rfc8259#section-8.3">Section&nbsp;8.3 of [RFC8259]</a>.  By contrast,

      { &quot;enum&quot;: [&quot;PENDING&quot;, &quot;IN_PROGRESS&quot;, &quot;DONE&quot; ]}

   is an example of a correct JTD schema of the &quot;enum&quot; form.

<span class="h4"><a class="selflink" id="section-2.2.5" href="#section-2.2.5">2.2.5</a>.  Elements</span>

   The &quot;elements&quot; form is defined by the &quot;elements&quot; CDDL rule in
   Figure 1.  The semantics of the &quot;elements&quot; form are described in
   <a href="#section-3.3.5">Section 3.3.5</a>.

   As an example of a correct JTD schema of the &quot;elements&quot; form,

      { &quot;elements&quot;: { &quot;type&quot;: &quot;uint8&quot; }}

   is a correct JTD schema, whereas

      { &quot;elements&quot;: true }

   and

      { &quot;elements&quot;: { &quot;type&quot;: &quot;foo&quot; } }

   are not correct schemas, as neither

      true

   nor

      { &quot;type&quot;: &quot;foo&quot; }

   are correct JTD schemas, and the value of the member named &quot;elements&quot;
   must be a correct JTD schema.

<span class="h4"><a class="selflink" id="section-2.2.6" href="#section-2.2.6">2.2.6</a>.  Properties</span>

   The &quot;properties&quot; form is defined by the &quot;properties&quot; CDDL rule in
   Figure 1.  The semantics of the &quot;properties&quot; form are described in
   <a href="#section-3.3.6">Section 3.3.6</a>.

   For a schema of the &quot;properties&quot; form to be correct, properties must
   either be required (i.e., in &quot;properties&quot;) or optional (i.e., in
   &quot;optionalProperties&quot;), but not both.

   More formally, if a schema has both a member named &quot;properties&quot; (with
   value _P_) and another member named &quot;optionalProperties&quot; (with value
   _O_), then _O_ and _P_ MUST NOT have any member names in common; that
   is, no member of _P_ may have a name equal to the name of any member
   of _O_, under the definition of string equality given in <a href="/doc/html/rfc8259#section-8.3">Section&nbsp;8.3
   of [RFC8259]</a>.

   Thus,

      {
        &quot;properties&quot;: { &quot;confusing&quot;: {} },
        &quot;optionalProperties&quot;: { &quot;confusing&quot;: {} }
      }

   is not a correct JTD schema, as &quot;confusing&quot; appears in both
   &quot;properties&quot; and &quot;optionalProperties&quot;.  By contrast,

      {
        &quot;properties&quot;: {
          &quot;users&quot;: {
            &quot;elements&quot;: {
              &quot;properties&quot;: {
                &quot;id&quot;: { &quot;type&quot;: &quot;string&quot; },
                &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; },
                &quot;create_time&quot;: { &quot;type&quot;: &quot;timestamp&quot; }
              },
              &quot;optionalProperties&quot;: {
                &quot;delete_time&quot;: { &quot;type&quot;: &quot;timestamp&quot; }
              }
            }
          },
          &quot;next_page_token&quot;: { &quot;type&quot;: &quot;string&quot; }
        }
      }

   is a correct JTD schema of the &quot;properties&quot; form, describing a
   paginated list of users and demonstrating the recursive nature of the
   syntax of JTD schemas.

<span class="h4"><a class="selflink" id="section-2.2.7" href="#section-2.2.7">2.2.7</a>.  Values</span>

   The &quot;values&quot; form is defined by the &quot;values&quot; CDDL rule in Figure 1.
   The semantics of the &quot;values&quot; form are described in <a href="#section-3.3.7">Section 3.3.7</a>.

   As an example of a correct JTD schema of the &quot;values&quot; form,

      { &quot;values&quot;: { &quot;type&quot;: &quot;uint8&quot; }}

   is a correct JTD schema, whereas

      { &quot;values&quot;: true }

   and

      { &quot;values&quot;: { &quot;type&quot;: &quot;foo&quot; } }

   are not correct schemas, as neither

      true

   nor

      { &quot;type&quot;: &quot;foo&quot; }

   are correct JTD schemas, and the value of the member named &quot;values&quot;
   must be a correct JTD schema.

<span class="h4"><a class="selflink" id="section-2.2.8" href="#section-2.2.8">2.2.8</a>.  Discriminator</span>

   The &quot;discriminator&quot; form is defined by the &quot;discriminator&quot; CDDL rule
   in Figure 1.  The semantics of the &quot;discriminator&quot; form are described
   in <a href="#section-3.3.8">Section 3.3.8</a>.  Understanding the semantics of the &quot;discriminator&quot;
   form will likely aid the reader in understanding why this section
   provides constraints on the &quot;discriminator&quot; form beyond those in
   Figure 1.

   To prevent ambiguous or unsatisfiable constraints on the
   &quot;discriminator&quot; property of a tagged union, an additional constraint
   on schemas of the &quot;discriminator&quot; form exists.  For schemas of the
   &quot;discriminator&quot; form:

   *  Let _D_ be the member of the schema with the name &quot;discriminator&quot;.

   *  Let _M_ be the member of the schema with the name &quot;mapping&quot;.

   If the schema is correct, then all member values _S_ of _M_ will be
   schemas of the &quot;properties&quot; form.  For each _S_:

   *  If _S_ has a member _N_ whose name equals &quot;nullable&quot;, _N_&#x27;s value
      MUST NOT be the JSON primitive value &quot;true&quot;.

   *  For each member _P_ of _S_ whose name equals &quot;properties&quot; or
      &quot;optionalProperties&quot;, _P_&#x27;s value, which must be an object, MUST
      NOT contain any members whose name equals _D_&#x27;s value.

   Thus,

      {
        &quot;discriminator&quot;: &quot;event_type&quot;,
        &quot;mapping&quot;: {
          &quot;can_the_object_be_null_or_not?&quot;: {
            &quot;nullable&quot;: true,
            &quot;properties&quot;: { &quot;foo&quot;: { &quot;type&quot;: &quot;string&quot; } }}
          }
        }
      }

   is an incorrect schema, as a member of &quot;mapping&quot; has a member named
   &quot;nullable&quot; whose value is &quot;true&quot;.  This would suggest that the
   instance may be null.  Yet, the top-level schema lacks such a
   &quot;nullable&quot; set to &quot;true&quot;, which would suggest that the instance in
   fact cannot be null.  If this were a correct JTD schema, it would be
   unclear which piece of information takes precedence.

   JTD handles such possible ambiguity by disallowing, at the syntactic
   level, the possibility of contradictory specifications of whether an
   instance described by a schema of the &quot;discriminator&quot; form may be
   null.  The schemas in a discriminator &quot;mapping&quot; cannot have
   &quot;nullable&quot; set to &quot;true&quot;; only the discriminator itself can use
   &quot;nullable&quot; in this way.

   It also follows that

      {
        &quot;discriminator&quot;: &quot;event_type&quot;,
        &quot;mapping&quot;: {
          &quot;is_event_type_a_string_or_a_float32?&quot;: {
            &quot;properties&quot;: { &quot;event_type&quot;: { &quot;type&quot;: &quot;float32&quot; }}
          }
        }
      }

   and

      {
        &quot;discriminator&quot;: &quot;event_type&quot;,
        &quot;mapping&quot;: {
          &quot;is_event_type_a_string_or_an_optional_float32?&quot;: {
            &quot;optionalProperties&quot;: { &quot;event_type&quot;: { &quot;type&quot;: &quot;float32&quot; }}
          }
        }
      }

   are incorrect schemas, as &quot;event_type&quot; is both the value of
   &quot;discriminator&quot; and a member name in one of the &quot;mapping&quot; member
   &quot;properties&quot; or &quot;optionalProperties&quot;.  This is ambiguous, because
   ordinarily the &quot;discriminator&quot; keyword would indicate that
   &quot;event_type&quot; is expected to be a string, but another part of the
   schema specifies that &quot;event_type&quot; is expected to be a number.

   JTD handles such possible ambiguity by disallowing, at the syntactic
   level, the possibility of contradictory specifications of
   discriminator &quot;tags&quot;.  Discriminator &quot;tags&quot; cannot be redefined in
   other parts of the schema.

   By contrast,

      {
        &quot;discriminator&quot;: &quot;event_type&quot;,
        &quot;mapping&quot;: {
          &quot;account_deleted&quot;: {
            &quot;properties&quot;: {
              &quot;account_id&quot;: { &quot;type&quot;: &quot;string&quot; }
            }
          },
          &quot;account_payment_plan_changed&quot;: {
            &quot;properties&quot;: {
              &quot;account_id&quot;: { &quot;type&quot;: &quot;string&quot; },
              &quot;payment_plan&quot;: { &quot;enum&quot;: [&quot;FREE&quot;, &quot;PAID&quot;] }
            },
            &quot;optionalProperties&quot;: {
              &quot;upgraded_by&quot;: { &quot;type&quot;: &quot;string&quot; }
            }
          }
        }
      }

   is a correct schema, describing a pattern of data common in JSON-
   based messaging systems.  <a href="#section-3.3.8">Section 3.3.8</a> provides examples of what
   this schema accepts and rejects.

<span class="h3"><a class="selflink" id="section-2.3" href="#section-2.3">2.3</a>.  Extending JTD&#x27;s Syntax</span>

   This document does not describe any extension mechanisms for JTD
   schema validation, which is described in <a href="#section-3">Section 3</a>.  However, schemas
   are defined to optionally contain a &quot;metadata&quot; keyword, whose value
   is an arbitrary JSON object.  Call the members of this object
   &quot;metadata members&quot;.

   Users MAY add metadata members to JTD schemas to convey information
   that is not pertinent to validation.  For example, such metadata
   members could provide hints to code generators or trigger some
   special behavior for a library that generates user interfaces from
   schemas.

   Users SHOULD NOT expect metadata members to be understood by other
   parties.  As a result, if consistent validation with other parties is
   a requirement, users MUST NOT use metadata members to affect how
   schema validation, as described in <a href="#section-3">Section 3</a>, works.

   Users MAY expect metadata members to be understood by other parties
   and MAY use metadata members to affect how schema validation works,
   if these other parties are somehow known to support these metadata
   members.  For example, two parties may agree, out of band, that they
   will support an extended JTD with a custom metadata member that
   affects validation.

<span class="h2"><a class="selflink" id="section-3" href="#section-3">3</a>.  Semantics</span>

   This section describes when an instance is valid against a correct
   JTD schema and the error indicators to produce when an instance is
   invalid.

<span class="h3"><a class="selflink" id="section-3.1" href="#section-3.1">3.1</a>.  Allowing Additional Properties</span>

   Users will have different desired behavior with respect to
   &quot;unspecified&quot; members in an instance.  For example, consider the JTD
   schema in Figure 2:

   { &quot;properties&quot;: { &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; }}}

                    Figure 2: An Illustrative JTD Schema

   Some users may expect that

      {&quot;a&quot;: &quot;foo&quot;, &quot;b&quot;: &quot;bar&quot;}

   satisfies the schema in Figure 2.  Others may disagree, as &quot;b&quot; is not
   one of the properties described in the schema.  In this document,
   allowing such &quot;unspecified&quot; members, like &quot;b&quot; in this example,
   happens when evaluation is in &quot;allow additional properties&quot; mode.

   Evaluation of a schema does not allow additional properties by
   default, but this can be overridden by having the schema include a
   member named &quot;additionalProperties&quot;, where that member has a value of
   &quot;true&quot;.

   More formally, evaluation of a schema _S_ is in &quot;allow additional
   properties&quot; mode if there exists a member of _S_ whose name equals
   &quot;additionalProperties&quot; and whose value is a boolean &quot;true&quot;.
   Otherwise, evaluation of _S_ is not in &quot;allow additional properties&quot;
   mode.

   See <a href="#section-3.3.6">Section 3.3.6</a> for how allowing unknown properties affects schema
   evaluation, but briefly, the schema

      { &quot;properties&quot;: { &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; }}}

   rejects

      { &quot;a&quot;: &quot;foo&quot;, &quot;b&quot;: &quot;bar&quot; }

   However, the schema

      {
        &quot;additionalProperties&quot;: true,
        &quot;properties&quot;: { &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; }}
      }

   accepts

      { &quot;a&quot;: &quot;foo&quot;, &quot;b&quot;: &quot;bar&quot; }

   Note that &quot;additionalProperties&quot; does not get &quot;inherited&quot; by
   subschemas.  For example, the JTD schema

      {
        &quot;additionalProperties&quot;: true,
        &quot;properties&quot;: {
          &quot;a&quot;: {
            &quot;properties&quot;: {
              &quot;b&quot;: { &quot;type&quot;: &quot;string&quot; }
            }
          }
        }
      }

   accepts

      { &quot;a&quot;: { &quot;b&quot;: &quot;c&quot; }, &quot;foo&quot;: &quot;bar&quot; }

   but rejects

      { &quot;a&quot;: { &quot;b&quot;: &quot;c&quot;, &quot;foo&quot;: &quot;bar&quot; }}

   because the &quot;additionalProperties&quot; at the root level does not affect
   the behavior of subschemas.

   Note from Figure 1 that only schemas of the &quot;properties&quot; form may
   have a member named &quot;additionalProperties&quot;.

<span class="h3"><a class="selflink" id="section-3.2" href="#section-3.2">3.2</a>.  Errors</span>

   To facilitate consistent validation error handling, this document
   specifies a standard error indicator format.  Implementations SHOULD
   support producing error indicators in this standard form.

   The standard error indicator format is a JSON array.  The order of
   the elements of this array is not specified.  The elements of this
   array are JSON objects with:

   *  A member with the name &quot;instancePath&quot;, whose value is a JSON
      string encoding a JSON Pointer.  This JSON Pointer will point to
      the part of the instance that was rejected.

   *  A member with the name &quot;schemaPath&quot;, whose value is a JSON string
      encoding a JSON Pointer.  This JSON Pointer will point to the part
      of the schema that rejected the instance.

   The values for &quot;instancePath&quot; and &quot;schemaPath&quot; depend on the form of
   the schema and are described in detail in <a href="#section-3.3">Section 3.3</a>.

<span class="h3"><a class="selflink" id="section-3.3" href="#section-3.3">3.3</a>.  Forms</span>

   This section describes, for each of the eight JTD schema forms, the
   rules dictating whether an instance is accepted, as well as the error
   indicators to produce when an instance is invalid.

   The forms a correct schema may take on are formally described in
   <a href="#section-2">Section 2</a>.

<span class="h4"><a class="selflink" id="section-3.3.1" href="#section-3.3.1">3.3.1</a>.  Empty</span>

   The &quot;empty&quot; form is meant to describe instances whose values are
   unknown, unpredictable, or otherwise unconstrained by the schema.
   The syntax of the &quot;empty&quot; form is described in <a href="#section-2.2.1">Section 2.2.1</a>.

   If a schema is of the &quot;empty&quot; form, then it accepts all instances.  A
   schema of the &quot;empty&quot; form will never produce any error indicators.

<span class="h4"><a class="selflink" id="section-3.3.2" href="#section-3.3.2">3.3.2</a>.  Ref</span>

   The &quot;ref&quot; form is for when a schema is defined in terms of something
   in the &quot;definitions&quot; of the root schema.  The &quot;ref&quot; form enables
   schemas to be less repetitive and also enables describing recursive
   structures.  The syntax of the &quot;ref&quot; form is described in
   <a href="#section-2.2.2">Section 2.2.2</a>.

   If a schema is of the &quot;ref&quot; form, then:

   *  If the schema has a member named &quot;nullable&quot; whose value is the
      boolean &quot;true&quot;, and the instance is the JSON primitive value
      &quot;null&quot;, then the schema accepts the instance.

      Otherwise:

      -  Let _R_ be the value of the schema member with the name &quot;ref&quot;.

      -  Let _B_ be the root schema containing the schema or the schema
         itself if it is a root schema.

      -  Let _D_ be the member of _B_ with the name &quot;definitions&quot;.  Per
         <a href="#section-2">Section 2</a>, we know _D_ exists.

      -  Let _S_ be the value of the member of _D_ whose name equals
         _R_. Per <a href="#section-2.2.2">Section 2.2.2</a>, we know _S_ exists and is a schema.

   The schema accepts the instance if and only if _S_ accepts the
   instance.  Otherwise, the error indicators to return in this case are
   the union of the error indicators from evaluating _S_ against the
   instance.

   For example, the schema

      {
        &quot;definitions&quot;: { &quot;a&quot;: { &quot;type&quot;: &quot;float32&quot; }},
        &quot;ref&quot;: &quot;a&quot;
      }

   accepts

      123

   but rejects

      null

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/definitions/a/type&quot; }]

   The schema

      {
        &quot;definitions&quot;: { &quot;a&quot;: { &quot;type&quot;: &quot;float32&quot; }},
        &quot;ref&quot;: &quot;a&quot;,
        &quot;nullable&quot;: true
      }

   accepts

      null

   because the schema has a &quot;nullable&quot; member whose value is &quot;true&quot;.

   Note that &quot;nullable&quot; being &quot;false&quot; has no effect in any of the forms
   described in this document.  For example, the schema

      {
        &quot;definitions&quot;: { &quot;a&quot;: { &quot;nullable&quot;: false, &quot;type&quot;: &quot;float32&quot; }},
        &quot;ref&quot;: &quot;a&quot;,
        &quot;nullable&quot;: true
      }

   accepts

      null

   In other words, it is not the case that putting a &quot;false&quot; value for
   &quot;nullable&quot; will ever override a &quot;nullable&quot; member in schemas of the
   &quot;ref&quot; form; it is correct, though ineffectual, to have a value of
   &quot;false&quot; for the &quot;nullable&quot; member in a schema.

<span class="h4"><a class="selflink" id="section-3.3.3" href="#section-3.3.3">3.3.3</a>.  Type</span>

   The &quot;type&quot; form is meant to describe instances whose value is a
   boolean, number, string, or timestamp [<a href="/doc/html/rfc3339" title="&quot;Date and Time on the Internet: Timestamps&quot;">RFC3339</a>].  The syntax of the
   &quot;type&quot; form is described in <a href="#section-2.2.3">Section 2.2.3</a>.

   If a schema is of the &quot;type&quot; form, then:

   *  If the schema has a member named &quot;nullable&quot; whose value is the
      boolean &quot;true&quot;, and the instance is the JSON primitive value
      &quot;null&quot;, then the schema accepts the instance.

      Otherwise:

         Let _T_ be the value of the member with the name &quot;type&quot;.  The
         following table describes whether the instance is accepted, as
         a function of _T_&#x27;s value:

         +============+=========================================+
            | If _&quot;T&quot;_   | then the instance is accepted if it is  |
            | equals ... | ...                                     |
            +============+=========================================+
            | boolean    | equal to &quot;true&quot; or &quot;false&quot;              |
            +------------+-----------------------------------------+
            | float32    | a JSON number                           |
            +------------+-----------------------------------------+
            | float64    | a JSON number                           |
            +------------+-----------------------------------------+
            | int8       | See Table 2                             |
            +------------+-----------------------------------------+
            | uint8      | See Table 2                             |
            +------------+-----------------------------------------+
            | int16      | See Table 2                             |
            +------------+-----------------------------------------+
            | uint16     | See Table 2                             |
            +------------+-----------------------------------------+
            | int32      | See Table 2                             |
            +------------+-----------------------------------------+
            | uint32     | See Table 2                             |
            +------------+-----------------------------------------+
            | string     | a JSON string                           |
            +------------+-----------------------------------------+
            | timestamp  | a JSON string that follows the standard |
            |            | format described in [<a href="/doc/html/rfc3339" title="&quot;Date and Time on the Internet: Timestamps&quot;">RFC3339</a>], as       |
            |            | refined by <a href="/doc/html/rfc4287#section-3.3">Section&nbsp;3.3 of [RFC4287]</a>     |
            +------------+-----------------------------------------+

                       Table 1: Accepted Values for Type

         &quot;float32&quot; and &quot;float64&quot; are distinguished from each other in
         their intent. &quot;float32&quot; indicates data intended to be processed
         as an IEEE 754 single-precision float, whereas &quot;float64&quot;
         indicates data intended to be processed as an IEEE 754 double-
         precision float.  Tools that generate code from JTD schemas
         will likely produce different code for &quot;float32&quot; than for
         &quot;float64&quot;.

   If _T_ starts with &quot;int&quot; or &quot;uint&quot;, then the instance is accepted if
   and only if it is a JSON number encoding a value with zero fractional
   part.  Depending on the value of _T_, this encoded number must
   additionally fall within a particular range:

    +========+===========================+===========================+
    | _&quot;T&quot;_  | Minimum Value (Inclusive) | Maximum Value (Inclusive) |
    +========+===========================+===========================+
    | int8   | -128                      | 127                       |
    +--------+---------------------------+---------------------------+
    | uint8  | 0                         | 255                       |
    +--------+---------------------------+---------------------------+
    | int16  | -32,768                   | 32,767                    |
    +--------+---------------------------+---------------------------+
    | uint16 | 0                         | 65,535                    |
    +--------+---------------------------+---------------------------+
    | int32  | -2,147,483,648            | 2,147,483,647             |
    +--------+---------------------------+---------------------------+
    | uint32 | 0                         | 4,294,967,295             |
    +--------+---------------------------+---------------------------+

                    Table 2: Ranges for Integer Types

   Note that

      10

   and

      10.0

   and

      1.0e1

   encode values with zero fractional part, whereas

      10.5

   encodes a number with a non-zero fractional part.  Thus, the schema

      {&quot;type&quot;: &quot;int8&quot;}

   accepts

      10

   and

      10.0

   and

      1.0e1

   but rejects

      10.5

   as well as

      false

   because &quot;false&quot; is not a number at all.

   If the instance is not accepted, then the error indicator for this
   case shall have an &quot;instancePath&quot; pointing to the instance and a
   &quot;schemaPath&quot; pointing to the schema member with the name &quot;type&quot;.

   For example, the schema

      {&quot;type&quot;: &quot;boolean&quot;}

   accepts

      false

   but rejects

      127

   The schema

      {&quot;type&quot;: &quot;float32&quot;}

   accepts

      10.5

   and

      127

   but rejects

      false

   The schema

      {&quot;type&quot;: &quot;string&quot;}

   accepts

      &quot;1985-04-12T23:20:50.52Z&quot;

   and

      &quot;foo&quot;

   but rejects

      false

   The schema

      {&quot;type&quot;: &quot;timestamp&quot;}

   accepts

      &quot;1985-04-12T23:20:50.52Z&quot;

   but rejects

      &quot;foo&quot;

   and

      false

   The schema

      {&quot;type&quot;: &quot;boolean&quot;, &quot;nullable&quot;: true}

   accepts

      null

   and

      false

   but rejects

      127

   In all of the examples of rejected instances given in this section,
   the error indicator to produce is:

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/type&quot; }]

<span class="h4"><a class="selflink" id="section-3.3.4" href="#section-3.3.4">3.3.4</a>.  Enum</span>

   The &quot;enum&quot; form is meant to describe instances whose value must be
   one of a given set of string values.  The syntax of the &quot;enum&quot; form
   is described in <a href="#section-2.2.4">Section 2.2.4</a>.

   If a schema is of the &quot;enum&quot; form, then:

   *  If the schema has a member named &quot;nullable&quot; whose value is the
      boolean &quot;true&quot;, and the instance is the JSON primitive value
      &quot;null&quot;, then the schema accepts the instance.

      Otherwise:

         Let _E_ be the value of the schema member with the name &quot;enum&quot;.
         The instance is accepted if and only if it is equal to one of
         the elements of _E_.

   If the instance is not accepted, then the error indicator for this
   case shall have an &quot;instancePath&quot; pointing to the instance and a
   &quot;schemaPath&quot; pointing to the schema member with the name &quot;enum&quot;.

   For example, the schema

      { &quot;enum&quot;: [&quot;PENDING&quot;, &quot;DONE&quot;, &quot;CANCELED&quot;] }

   accepts

      &quot;PENDING&quot;

   and

      &quot;DONE&quot;

   and

      &quot;CANCELED&quot;

   but rejects all of

      0

   and

      1

   and

      2

   and

      &quot;UNKNOWN&quot;

   and

      null

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/enum&quot; }]

   The schema

      { &quot;enum&quot;: [&quot;PENDING&quot;, &quot;DONE&quot;, &quot;CANCELED&quot;], &quot;nullable&quot;: true }

   accepts

      &quot;PENDING&quot;

   and

      null

   but rejects

      1

   and

      &quot;UNKNOWN&quot;

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/enum&quot; }]

<span class="h4"><a class="selflink" id="section-3.3.5" href="#section-3.3.5">3.3.5</a>.  Elements</span>

   The &quot;elements&quot; form is meant to describe instances that must be
   arrays.  A further subschema describes the elements of the array.
   The syntax of the &quot;elements&quot; form is described in <a href="#section-2.2.5">Section 2.2.5</a>.

   If a schema is of the &quot;elements&quot; form, then:

   *  If the schema has a member named &quot;nullable&quot; whose value is the
      boolean &quot;true&quot;, and the instance is the JSON primitive value
      &quot;null&quot;, then the schema accepts the instance.

      Otherwise:

         Let _S_ be the value of the schema member with the name
         &quot;elements&quot;.  The instance is accepted if and only if all of the
         following are true:

         o  The instance is an array.  Otherwise, the error indicator
            for this case shall have an &quot;instancePath&quot; pointing to the
            instance and a &quot;schemaPath&quot; pointing to the schema member
            with the name &quot;elements&quot;.

         o  If the instance is an array, then every element of the
            instance must be accepted by _S_. Otherwise, the error
            indicators for this case are the union of all the errors
            arising from evaluating _S_ against elements of the
            instance.

   For example, the schema

      {
        &quot;elements&quot;: {
          &quot;type&quot;: &quot;float32&quot;
        }
      }

   accepts

      []

   and

      [1, 2, 3]

   but rejects

      null

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/elements&quot; }]

   and rejects

      [1, 2, &quot;foo&quot;, 3, &quot;bar&quot;]

   with the error indicators

      [
        { &quot;instancePath&quot;: &quot;/2&quot;, &quot;schemaPath&quot;: &quot;/elements/type&quot; },
        { &quot;instancePath&quot;: &quot;/4&quot;, &quot;schemaPath&quot;: &quot;/elements/type&quot; }
      ]

   The schema

      {
        &quot;elements&quot;: {
          &quot;type&quot;: &quot;float32&quot;
        },
        &quot;nullable&quot;: true
      }

   accepts

      null

   and

      []

   and

      [1, 2, 3]

   but rejects

      [1, 2, &quot;foo&quot;, 3, &quot;bar&quot;]

   with the error indicators

      [
        { &quot;instancePath&quot;: &quot;/2&quot;, &quot;schemaPath&quot;: &quot;/elements/type&quot; },
        { &quot;instancePath&quot;: &quot;/4&quot;, &quot;schemaPath&quot;: &quot;/elements/type&quot; }
      ]

<span class="h4"><a class="selflink" id="section-3.3.6" href="#section-3.3.6">3.3.6</a>.  Properties</span>

   The &quot;properties&quot; form is meant to describe JSON objects being used as
   a &quot;struct&quot;.  The syntax of the &quot;properties&quot; form is described in
   <a href="#section-2.2.6">Section 2.2.6</a>.

   If a schema is of the &quot;properties&quot; form, then:

   *  If the schema has a member named &quot;nullable&quot; whose value is the
      boolean &quot;true&quot;, and the instance is the JSON primitive value
      &quot;null&quot;, then the schema accepts the instance.

      Otherwise:

      -  The instance must be an object.

         Otherwise, the schema rejects the instance.  The error
         indicator for this case shall have an &quot;instancePath&quot; pointing
         to the instance, and a &quot;schemaPath&quot; pointing to the schema
         member with the name &quot;properties&quot; if such a schema member
         exists; if such a member doesn&#x27;t exist, &quot;schemaPath&quot; shall
         point to the schema member with the name &quot;optionalProperties&quot;.

      -  If the instance is an object, and the schema has a member named
         &quot;properties&quot;, then let _P_ be the value of the schema member
         named &quot;properties&quot;.  Per <a href="#section-2.2.6">Section 2.2.6</a>, we know _P_ is an
         object.  For every member name in _P_, a member of the same
         name in the instance must exist.

         Otherwise, the schema rejects the instance.  The error
         indicator for this case shall have an &quot;instancePath&quot; pointing
         to the instance, and a &quot;schemaPath&quot; pointing to the member of
         _P_ failing the requirement just described.

      -  If the instance is an object, then let _P_ be the value of the
         schema member named &quot;properties&quot; (if it exists) and _O_ be the
         value of the schema member named &quot;optionalProperties&quot; (if it
         exists).

         For every member _I_ of the instance, find a member with the
         same name as _I_&#x27;s in _P_ or _O_. Per <a href="#section-2.2.6">Section 2.2.6</a>, we know it
         is not possible for both _P_ and _O_ to have such a member.  If
         the &quot;discriminator tag exemption&quot; is in effect on _I_ (see
         <a href="#section-3.3.8">Section 3.3.8</a>), then ignore _I_.

         Otherwise:

         o  If no such member in _P_ or _O_ exists and validation is not
            in &quot;allow additional properties&quot; mode (see <a href="#section-3.1">Section 3.1</a>),
            then the schema rejects the instance.

            The error indicator for this case has an &quot;instancePath&quot;
            pointing to _I_ and a &quot;schemaPath&quot; pointing to the schema.

         o  If such a member in _P_ or _O_ does exist, then call this
            member _S_. If _S_ rejects _I_&#x27;s value, then the schema
            rejects the instance.

            The error indicators for this case are the union of the
            error indicators from evaluating _S_ against _I_&#x27;s value.

      If an instance is an object, it may have multiple errors arising
      from the second and third bullet in the list above.  In this case,
      the error indicators are the union of the errors.

      For example, the schema

         {
           &quot;properties&quot;: {
             &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;b&quot;: { &quot;type&quot;: &quot;string&quot; }
           },
           &quot;optionalProperties&quot;: {
             &quot;c&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;d&quot;: { &quot;type&quot;: &quot;string&quot; }
           }
         }

      accepts

         { &quot;a&quot;: &quot;foo&quot;, &quot;b&quot;: &quot;bar&quot; }

      and

         { &quot;a&quot;: &quot;foo&quot;, &quot;b&quot;: &quot;bar&quot;, &quot;c&quot;: &quot;baz&quot; }

      and

         { &quot;a&quot;: &quot;foo&quot;, &quot;b&quot;: &quot;bar&quot;, &quot;c&quot;: &quot;baz&quot;, &quot;d&quot;: &quot;quux&quot; }

      and

         { &quot;a&quot;: &quot;foo&quot;, &quot;b&quot;: &quot;bar&quot;, &quot;d&quot;: &quot;quux&quot; }

      but rejects

         null

      with the error indicator

         [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/properties&quot; }]

      and rejects

         { &quot;b&quot;: 3, &quot;c&quot;: 3, &quot;e&quot;: 3 }

      with the error indicators

         [
           { &quot;instancePath&quot;: &quot;&quot;,
             &quot;schemaPath&quot;: &quot;/properties/a&quot; },
           { &quot;instancePath&quot;: &quot;/b&quot;,
             &quot;schemaPath&quot;: &quot;/properties/b/type&quot; },
           { &quot;instancePath&quot;: &quot;/c&quot;,
             &quot;schemaPath&quot;: &quot;/optionalProperties/c/type&quot; },
           { &quot;instancePath&quot;: &quot;/e&quot;,
             &quot;schemaPath&quot;: &quot;&quot; }
         ]

      If instead the schema had &quot;additionalProperties: true&quot; but was
      otherwise the same:

         {
           &quot;properties&quot;: {
             &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;b&quot;: { &quot;type&quot;: &quot;string&quot; }
           },
           &quot;optionalProperties&quot;: {
             &quot;c&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;d&quot;: { &quot;type&quot;: &quot;string&quot; }
           },
           &quot;additionalProperties&quot;: true
         }

      and the instance remained the same:

         { &quot;b&quot;: 3, &quot;c&quot;: 3, &quot;e&quot;: 3 }

      then the error indicators from evaluating the instance against the
      schema would be:

         [
           { &quot;instancePath&quot;: &quot;&quot;,
             &quot;schemaPath&quot;: &quot;/properties/a&quot; },
           { &quot;instancePath&quot;: &quot;/b&quot;,
             &quot;schemaPath&quot;: &quot;/properties/b/type&quot; },
           { &quot;instancePath&quot;: &quot;/c&quot;,
             &quot;schemaPath&quot;: &quot;/optionalProperties/c/type&quot; },
         ]

      These are the same errors as before, except the final error
      (associated with the additional member named &quot;e&quot; in the instance)
      is no longer present.  This is because &quot;additionalProperties:
      true&quot; enables &quot;allow additional properties&quot; mode on the schema.

      Finally, the schema

         {
           &quot;nullable&quot;: true,
           &quot;properties&quot;: {
             &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;b&quot;: { &quot;type&quot;: &quot;string&quot; }
           },
           &quot;optionalProperties&quot;: {
             &quot;c&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;d&quot;: { &quot;type&quot;: &quot;string&quot; }
           },
           &quot;additionalProperties&quot;: true
         }

      accepts

         null

      but rejects

         { &quot;b&quot;: 3, &quot;c&quot;: 3, &quot;e&quot;: 3 }

      with the error indicators

         [
           { &quot;instancePath&quot;: &quot;&quot;,
             &quot;schemaPath&quot;: &quot;/properties/a&quot; },
           { &quot;instancePath&quot;: &quot;/b&quot;,
             &quot;schemaPath&quot;: &quot;/properties/b/type&quot; },
           { &quot;instancePath&quot;: &quot;/c&quot;,
             &quot;schemaPath&quot;: &quot;/optionalProperties/c/type&quot; },
         ]

<span class="h4"><a class="selflink" id="section-3.3.7" href="#section-3.3.7">3.3.7</a>.  Values</span>

   The &quot;values&quot; form is meant to describe instances that are JSON
   objects being used as an associative array.  The syntax of the
   &quot;values&quot; form is described in <a href="#section-2.2.7">Section 2.2.7</a>.

   If a schema is of the &quot;values&quot; form, then:

   *  If the schema has a member named &quot;nullable&quot; whose value is the
      boolean &quot;true&quot;, and the instance is the JSON primitive value
      &quot;null&quot;, then the schema accepts the instance.

      Otherwise:

         Let _S_ be the value of the schema member with the name
         &quot;values&quot;.  The instance is accepted if and only if all of the
         following are true:

         o  The instance is an object.  Otherwise, the error indicator
            for this case shall have an &quot;instancePath&quot; pointing to the
            instance and a &quot;schemaPath&quot; pointing to the schema member
            with the name &quot;values&quot;.

         o  If the instance is an object, then every member value of the
            instance must be accepted by _S_. Otherwise, the error
            indicators for this case are the union of all the error
            indicators arising from evaluating _S_ against member values
            of the instance.

   For example, the schema

      {
        &quot;values&quot;: {
          &quot;type&quot;: &quot;float32&quot;
        }
      }

   accepts

      {}

   and

      {&quot;a&quot;: 1, &quot;b&quot;: 2}

   but rejects

      null

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/values&quot; }]

   and rejects

      { &quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: &quot;foo&quot;, &quot;d&quot;: 3, &quot;e&quot;: &quot;bar&quot; }

   with the error indicators

      [
        { &quot;instancePath&quot;: &quot;/c&quot;, &quot;schemaPath&quot;: &quot;/values/type&quot; },
        { &quot;instancePath&quot;: &quot;/e&quot;, &quot;schemaPath&quot;: &quot;/values/type&quot; }
      ]

   The schema

      {
        &quot;nullable&quot;: true,
        &quot;values&quot;: {
          &quot;type&quot;: &quot;float32&quot;
        }
      }

   accepts

      null

   but rejects

      { &quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: &quot;foo&quot;, &quot;d&quot;: 3, &quot;e&quot;: &quot;bar&quot; }

   with the error indicators

      [
        { &quot;instancePath&quot;: &quot;/c&quot;, &quot;schemaPath&quot;: &quot;/values/type&quot; },
        { &quot;instancePath&quot;: &quot;/e&quot;, &quot;schemaPath&quot;: &quot;/values/type&quot; }
      ]

<span class="h4"><a class="selflink" id="section-3.3.8" href="#section-3.3.8">3.3.8</a>.  Discriminator</span>

   The &quot;discriminator&quot; form is meant to describe JSON objects being used
   in a fashion similar to a discriminated union construct in C-like
   languages.  The syntax of the &quot;discriminator&quot; form is described in
   <a href="#section-2.2.8">Section 2.2.8</a>.

   When a schema is of the &quot;discriminator&quot; form, it validates that:

   *  the instance is an object,

   *  the instance has a particular &quot;tag&quot; property,

   *  this &quot;tag&quot; property&#x27;s value is a string within a set of valid
      values, and

   *  the instance satisfies another schema, where this other schema is
      chosen based on the value of the &quot;tag&quot; property.

   The behavior of the &quot;discriminator&quot; form is more complex than the
   other keywords.  Readers familiar with CDDL may find the final
   example in <a href="#appendix-B">Appendix B</a> helpful in understanding its behavior.  What
   follows in this section is a description of the &quot;discriminator&quot;
   form&#x27;s behavior, as well as some examples.

   If a schema is of the &quot;discriminator&quot; form, then:

   *  Let _D_ be the schema member with the name &quot;discriminator&quot;.

   *  Let _M_ be the schema member with the name &quot;mapping&quot;.

   *  Let _I_ be the instance member whose name equals _D_&#x27;s value. _I_
      may, for some rejected instances, not exist.

   *  Let _S_ be the member of _M_ whose name equals _I_&#x27;s value. _S_
      may, for some rejected instances, not exist.

   If the schema has a member named &quot;nullable&quot; whose value is the
   boolean &quot;true&quot;, and the instance is the JSON primitive value &quot;null&quot;,
   then the schema accepts the instance.  Otherwise, the instance is
   accepted if and only if all of the following are true:

   *  The instance is an object.

      Otherwise, the error indicator for this case shall have an
      &quot;instancePath&quot; pointing to the instance and a &quot;schemaPath&quot;
      pointing to _D_.

   *  If the instance is a JSON object, then _I_ must exist.

      Otherwise, the error indicator for this case shall have an
      &quot;instancePath&quot; pointing to the instance and a &quot;schemaPath&quot;
      pointing to _D_.

   *  If the instance is a JSON object and _I_ exists, _I_&#x27;s value must
      be a string.

      Otherwise, the error indicator for this case shall have an
      &quot;instancePath&quot; pointing to _I_ and a &quot;schemaPath&quot; pointing to _D_.

   *  If the instance is a JSON object and _I_ exists and has a string
      value, then _S_ must exist.

      Otherwise, the error indicator for this case shall have an
      &quot;instancePath&quot; pointing to _I_ and a &quot;schemaPath&quot; pointing to _M_.

   *  If the instance is a JSON object, _I_ exists, and _S_ exists, then
      the instance must satisfy _S_&#x27;s value.  Per <a href="#section-2">Section 2</a>, we know
      _S_&#x27;s value is a schema of the &quot;properties&quot; form.  Apply the
      &quot;discriminator tag exemption&quot; afforded in <a href="#section-3.3.6">Section 3.3.6</a> to _I_
      when evaluating whether the instance satisfies _S_&#x27;s value.

      Otherwise, the error indicators for this case shall be error
      indicators from evaluating _S_&#x27;s value against the instance, with
      the &quot;discriminator tag exemption&quot; applied to _I_.

   The list items above are defined in a mutually exclusive way.  For
   any given instance and schema, exactly one of the list items above
   will apply.

   For example, the schema

      {
        &quot;discriminator&quot;: &quot;version&quot;,
        &quot;mapping&quot;: {
          &quot;v1&quot;: {
            &quot;properties&quot;: {
              &quot;a&quot;: { &quot;type&quot;: &quot;float32&quot; }
            }
          },
          &quot;v2&quot;: {
            &quot;properties&quot;: {
              &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; }
            }
          }
        }
      }

   rejects

      null

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/discriminator&quot; }]

   (This is the case of the instance not being an object.)

   Also rejected is

      {}

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/discriminator&quot; }]

   (This is the case of _I_ not existing.)

   Also rejected is

      { &quot;version&quot;: 1 }

   with the error indicator

      [
        {
          &quot;instancePath&quot;: &quot;/version&quot;,
          &quot;schemaPath&quot;: &quot;/discriminator&quot;
        }
      ]

   (This is the case of _I_ existing but not having a string value.)

   Also rejected is

      { &quot;version&quot;: &quot;v3&quot; }

   with the error indicator

      [
        {
          &quot;instancePath&quot;: &quot;/version&quot;,
          &quot;schemaPath&quot;: &quot;/mapping&quot;
        }
      ]

   (This is the case of _I_ existing and having a string value but _S_
   not existing.)

   Also rejected is

      { &quot;version&quot;: &quot;v2&quot;, &quot;a&quot;: 3 }

   with the error indicator

      [
        {
          &quot;instancePath&quot;: &quot;/a&quot;,
          &quot;schemaPath&quot;: &quot;/mapping/v2/properties/a/type&quot;
        }
      ]

   (This is the case of _I_ and _S_ existing but the instance not
   satisfying _S_&#x27;s value.)

   Finally, the schema accepts

      { &quot;version&quot;: &quot;v2&quot;, &quot;a&quot;: &quot;foo&quot; }

   This instance is accepted even though &quot;version&quot; is not mentioned by
   &quot;/mapping/v2/properties&quot;; the &quot;discriminator tag exemption&quot; ensures
   that &quot;version&quot; is not treated as an additional property when
   evaluating the instance against _S_&#x27;s value.

   By contrast, consider the same schema but with &quot;nullable&quot; being
   &quot;true&quot;.  The schema

      {
        &quot;nullable&quot;: true,
         &quot;discriminator&quot;: &quot;version&quot;,
         &quot;mapping&quot;: {
           &quot;v1&quot;: {
             &quot;properties&quot;: {
               &quot;a&quot;: { &quot;type&quot;: &quot;float32&quot; }
             }
           },
           &quot;v2&quot;: {
             &quot;properties&quot;: {
               &quot;a&quot;: { &quot;type&quot;: &quot;string&quot; }
             }
           }
         }
      }

   accepts

      null

   To further illustrate the &quot;discriminator&quot; form with examples, recall
   the JTD schema in <a href="#section-2.2.8">Section 2.2.8</a>, reproduced here:

      {
        &quot;discriminator&quot;: &quot;event_type&quot;,
        &quot;mapping&quot;: {
          &quot;account_deleted&quot;: {
            &quot;properties&quot;: {
              &quot;account_id&quot;: { &quot;type&quot;: &quot;string&quot; }
            }
          },
          &quot;account_payment_plan_changed&quot;: {
            &quot;properties&quot;: {
              &quot;account_id&quot;: { &quot;type&quot;: &quot;string&quot; },
              &quot;payment_plan&quot;: { &quot;enum&quot;: [&quot;FREE&quot;, &quot;PAID&quot;] }
            },
            &quot;optionalProperties&quot;: {
              &quot;upgraded_by&quot;: { &quot;type&quot;: &quot;string&quot; }
            }
          }
        }
      }

   This schema accepts

      { &quot;event_type&quot;: &quot;account_deleted&quot;, &quot;account_id&quot;: &quot;abc-123&quot; }

   and

      {
        &quot;event_type&quot;: &quot;account_payment_plan_changed&quot;,
        &quot;account_id&quot;: &quot;abc-123&quot;,
        &quot;payment_plan&quot;: &quot;PAID&quot;
      }

   and

      {
        &quot;event_type&quot;: &quot;account_payment_plan_changed&quot;,
        &quot;account_id&quot;: &quot;abc-123&quot;,
        &quot;payment_plan&quot;: &quot;PAID&quot;,
        &quot;upgraded_by&quot;: &quot;users/mkhwarizmi&quot;
      }

   but rejects

      {}

   with the error indicator

      [{ &quot;instancePath&quot;: &quot;&quot;, &quot;schemaPath&quot;: &quot;/discriminator&quot; }]

   and rejects

      { &quot;event_type&quot;: &quot;some_other_event_type&quot; }

   with the error indicator

      [
        {
          &quot;instancePath&quot;: &quot;/event_type&quot;,
          &quot;schemaPath&quot;: &quot;/mapping&quot;
        }
      ]

   and rejects

      { &quot;event_type&quot;: &quot;account_deleted&quot; }

   with the error indicator

      [{
        &quot;instancePath&quot;: &quot;&quot;,
        &quot;schemaPath&quot;: &quot;/mapping/account_deleted/properties/account_id&quot;
      }]

   and rejects

      {
        &quot;event_type&quot;: &quot;account_payment_plan_changed&quot;,
        &quot;account_id&quot;: &quot;abc-123&quot;,
        &quot;payment_plan&quot;: &quot;PAID&quot;,
        &quot;xxx&quot;: &quot;asdf&quot;
      }

   with the error indicator

      [{
        &quot;instancePath&quot;: &quot;/xxx&quot;,
        &quot;schemaPath&quot;: &quot;/mapping/account_payment_plan_changed&quot;
      }]

<span class="h2"><a class="selflink" id="section-4" href="#section-4">4</a>.  IANA Considerations</span>

   This document has no IANA actions.

<span class="h2"><a class="selflink" id="section-5" href="#section-5">5</a>.  Security Considerations</span>

   Implementations of JTD will necessarily be manipulating JSON data.
   Therefore, the security considerations of [<a href="/doc/html/rfc8259" title="&quot;The JavaScript Object Notation (JSON) Data Interchange Format&quot;">RFC8259</a>] are all relevant
   here.

   Implementations that evaluate user-inputted schemas SHOULD implement
   mechanisms to detect and abort circular references that might cause a
   naive implementation to go into an infinite loop.  Without such
   mechanisms, implementations may be vulnerable to denial-of-service
   attacks.

<span class="h2"><a class="selflink" id="section-6" href="#section-6">6</a>.  References</span>

<span class="h3"><a class="selflink" id="section-6.1" href="#section-6.1">6.1</a>.  Normative References</span>

   [<a id="ref-RFC2119">RFC2119</a>]  Bradner, S., &quot;Key words for use in RFCs to Indicate
              Requirement Levels&quot;, <a href="/doc/html/bcp14">BCP 14</a>, <a href="/doc/html/rfc2119">RFC 2119</a>,
              DOI 10.17487/RFC2119, March 1997,
              &lt;<a href="https://www.rfc-editor.org/info/rfc2119">https://www.rfc-editor.org/info/rfc2119</a>&gt;.

   [<a id="ref-RFC3339">RFC3339</a>]  Klyne, G. and C. Newman, &quot;Date and Time on the Internet:
              Timestamps&quot;, <a href="/doc/html/rfc3339">RFC 3339</a>, DOI 10.17487/RFC3339, July 2002,
              &lt;<a href="https://www.rfc-editor.org/info/rfc3339">https://www.rfc-editor.org/info/rfc3339</a>&gt;.

   [<a id="ref-RFC4287">RFC4287</a>]  Nottingham, M., Ed. and R. Sayre, Ed., &quot;The Atom
              Syndication Format&quot;, <a href="/doc/html/rfc4287">RFC 4287</a>, DOI 10.17487/RFC4287,
              December 2005, &lt;<a href="https://www.rfc-editor.org/info/rfc4287">https://www.rfc-editor.org/info/rfc4287</a>&gt;.

   [<a id="ref-RFC6901">RFC6901</a>]  Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,
              &quot;JavaScript Object Notation (JSON) Pointer&quot;, <a href="/doc/html/rfc6901">RFC 6901</a>,
              DOI 10.17487/RFC6901, April 2013,
              &lt;<a href="https://www.rfc-editor.org/info/rfc6901">https://www.rfc-editor.org/info/rfc6901</a>&gt;.

   [<a id="ref-RFC8174">RFC8174</a>]  Leiba, B., &quot;Ambiguity of Uppercase vs Lowercase in <a href="/doc/html/rfc2119">RFC</a>
              <a href="/doc/html/rfc2119">2119</a> Key Words&quot;, <a href="/doc/html/bcp14">BCP 14</a>, <a href="/doc/html/rfc8174">RFC 8174</a>, DOI 10.17487/RFC8174,
              May 2017, &lt;<a href="https://www.rfc-editor.org/info/rfc8174">https://www.rfc-editor.org/info/rfc8174</a>&gt;.

   [<a id="ref-RFC8259">RFC8259</a>]  Bray, T., Ed., &quot;The JavaScript Object Notation (JSON) Data
              Interchange Format&quot;, STD 90, <a href="/doc/html/rfc8259">RFC 8259</a>,
              DOI 10.17487/RFC8259, December 2017,
              &lt;<a href="https://www.rfc-editor.org/info/rfc8259">https://www.rfc-editor.org/info/rfc8259</a>&gt;.

   [<a id="ref-RFC8610">RFC8610</a>]  Birkholz, H., Vigano, C., and C. Bormann, &quot;Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures&quot;, <a href="/doc/html/rfc8610">RFC 8610</a>, DOI 10.17487/RFC8610,
              June 2019, &lt;<a href="https://www.rfc-editor.org/info/rfc8610">https://www.rfc-editor.org/info/rfc8610</a>&gt;.

<span class="h3"><a class="selflink" id="section-6.2" href="#section-6.2">6.2</a>.  Informative References</span>

   [<a id="ref-JSON-SCHEMA">JSON-SCHEMA</a>]
              Wright, A., Andrews, H., Hutton, B., and G. Dennis, &quot;JSON
              Schema: A Media Type for Describing JSON Documents&quot;, Work
              in Progress, Internet-Draft, <a href="/doc/html/draft-handrews-json-schema-02">draft-handrews-json-schema-</a>
              <a href="/doc/html/draft-handrews-json-schema-02">02</a>, 17 September 2019, &lt;<a href="https://tools.ietf.org/html/draft-handrews-json-schema-02">https://tools.ietf.org/html/draft-</a>
              <a href="https://tools.ietf.org/html/draft-handrews-json-schema-02">handrews-json-schema-02</a>&gt;.

   [<a id="ref-OPENAPI">OPENAPI</a>]  OpenAPI Initiative, &quot;OpenAPI Specification&quot;, February
              2020, &lt;<a href="https://spec.openapis.org/oas/v3.0.3">https://spec.openapis.org/oas/v3.0.3</a>&gt;.

   [<a id="ref-RFC7071">RFC7071</a>]  Borenstein, N. and M. Kucherawy, &quot;A Media Type for
              Reputation Interchange&quot;, <a href="/doc/html/rfc7071">RFC 7071</a>, DOI 10.17487/RFC7071,
              November 2013, &lt;<a href="https://www.rfc-editor.org/info/rfc7071">https://www.rfc-editor.org/info/rfc7071</a>&gt;.

   [<a id="ref-RFC7493">RFC7493</a>]  Bray, T., Ed., &quot;The I-JSON Message Format&quot;, <a href="/doc/html/rfc7493">RFC 7493</a>,
              DOI 10.17487/RFC7493, March 2015,
              &lt;<a href="https://www.rfc-editor.org/info/rfc7493">https://www.rfc-editor.org/info/rfc7493</a>&gt;.

<span class="h2"><a class="selflink" id="appendix-A" href="#appendix-A">Appendix A</a>.  Rationale for Omitted Features</span>

   This appendix is not normative.

   This section describes possible features that are intentionally left
   out of JSON Type Definition and justifies why these features are
   omitted.

<span class="h3"><a class="selflink" id="appendix-A.1" href="#appendix-A.1">A.1</a>.  Support for 64-Bit Numbers</span>

   This document does not allow &quot;int64&quot; or &quot;uint64&quot; as values for the
   JTD &quot;type&quot; keyword (see Sections <a href="#section-2.2.3">2.2.3</a> and <a href="#section-3.3.3">3.3.3</a>).  Such hypothetical
   &quot;int64&quot; or &quot;uint64&quot; types would behave like &quot;int32&quot; or &quot;uint32&quot;
   (respectively) but with the range of values associated with 64-bit
   instead of 32-bit integers.  That is:

   *  &quot;int64&quot; would accept numbers between -(2**63) and (2**63)-1

   *  &quot;uint64&quot; would accept numbers between 0 and (2**64)-1

   Users of &quot;int64&quot; and &quot;uint64&quot; would likely expect that the full range
   of signed or unsigned 64-bit integers could interoperably be
   transmitted as JSON without loss of precision.  But this assumption
   is likely to be incorrect, for the reasons given in <a href="/doc/html/rfc7493#section-2.2">Section&nbsp;2.2 of
   [RFC7493]</a>.

   &quot;int64&quot; and &quot;uint64&quot; likely would have led users to falsely assume
   that the full range of 64-bit integers can be interoperably processed
   as JSON without loss of precision.  To avoid leading users astray,
   JTD omits &quot;int64&quot; and &quot;uint64&quot;.

<span class="h3"><a class="selflink" id="appendix-A.2" href="#appendix-A.2">A.2</a>.  Support for Non-root Definitions</span>

   This document disallows the &quot;definitions&quot; keyword from appearing
   outside of root schemas (see Figure 1).  Conceivably, this document
   could have instead allowed &quot;definitions&quot; to appear on any schema,
   even non-root ones.  Under this alternative design, &quot;ref&quot;s would
   resolve to a definition in the &quot;nearest&quot; (i.e., most nested) schema
   that both contained the &quot;ref&quot; and had a suitably named &quot;definitions&quot;
   member.

   For instance, under this alternative approach, one could define
   schemas like the one in Figure 3.

   {
     &quot;properties&quot;: {
       &quot;foo&quot;: {
         &quot;definitions&quot;: {
           &quot;user&quot;: { &quot;properties&quot;: { &quot;user_id&quot;: {&quot;type&quot;: &quot;string&quot; }}}
         },
         &quot;ref&quot;: &quot;user&quot;
       },
       &quot;bar&quot;: {
         &quot;definitions&quot;: {
           &quot;user&quot;: { &quot;properties&quot;: { &quot;user_id&quot;: {&quot;type&quot;: &quot;string&quot; }}}
         },
         &quot;ref&quot;: &quot;user&quot;
       },
       &quot;baz&quot;: {
         &quot;definitions&quot;: {
           &quot;user&quot;: { &quot;properties&quot;: { &quot;userId&quot;: {&quot;type&quot;: &quot;string&quot; }}}
         },
         &quot;ref&quot;: &quot;user&quot;
       }
     }
   }

    Figure 3: A Hypothetical Schema Had This Document Permitted Non-root
              Definitions.  This Is Not a Correct JTD Schema.

   If schemas like that in Figure 3 were permitted, code generation from
   JTD schemas would be more difficult, and the generated code would be
   less useful.

   Code generation would be more difficult because it would force code
   generators to implement a name-mangling scheme for types generated
   from definitions.  This additional difficulty is not immense, but it
   adds complexity to an otherwise relatively trivial task.

   Generated code would be less useful because generated, mangled struct
   names are less pithy than human-defined struct names.  For instance,
   the &quot;user&quot; definitions in Figure 3 might have been generated into
   types named &quot;PropertiesFooUser&quot;, &quot;PropertiesBarUser&quot;, and
   &quot;PropertiesBazUser&quot;; obtuse names like these are less useful to
   human-written code than names like &quot;User&quot;.

   Furthermore, even though &quot;PropertiesFooUser&quot; and &quot;PropertiesBarUser&quot;
   would be essentially identical, they would not be interchangeable in
   many statically typed programming languages.  A code generator could
   attempt to circumvent this by deduplicating identical definitions,
   but then the user might be confused as to why the subtly distinct
   &quot;PropertiesBazUser&quot;, defined from a schema allowing a property named
   &quot;userId&quot; (not &quot;user_id&quot;), was not deduplicated.

   Because there seem to be implementation and usability challenges
   associated with non-root definitions, and because it would be easier
   to later amend JTD to permit for non-root definitions than to later
   amend JTD to prohibit them, this document does not permit non-root
   definitions in JTD schemas.

<span class="h2"><a class="selflink" id="appendix-B" href="#appendix-B">Appendix B</a>.  Comparison with CDDL</span>

   This appendix is not normative.

   To aid the reader familiar with CDDL, this section illustrates how
   JTD works by presenting JTD schemas and CDDL schemas that accept and
   reject the same instances.

   The JTD schema

      {}

   accepts the same instances as the CDDL rule

      root = any

   The JTD schema

      {
        &quot;definitions&quot;: {
          &quot;a&quot;: { &quot;elements&quot;: { &quot;ref&quot;: &quot;b&quot; }},
          &quot;b&quot;: { &quot;type&quot;: &quot;float32&quot; }
        },
        &quot;elements&quot;: {
          &quot;ref&quot;: &quot;a&quot;
        }
      }

   accepts the same instances as the CDDL rule

      root = [* a]
      a = [* b]
      b = number

   The JTD schema

      { &quot;enum&quot;: [&quot;PENDING&quot;, &quot;DONE&quot;, &quot;CANCELED&quot;]}

   accepts the same instances as the CDDL rule

      root = &quot;PENDING&quot; / &quot;DONE&quot; / &quot;CANCELED&quot;

   The JTD schema

      {&quot;type&quot;: &quot;boolean&quot;}

   accepts the same instances as the CDDL rule

      root = bool

   The JTD schemas:

      {&quot;type&quot;: &quot;float32&quot;}

   and

      {&quot;type&quot;: &quot;float64&quot;}

   both accept the same instances as the CDDL rule

      root = number

   The JTD schema

      {&quot;type&quot;: &quot;string&quot;}

   accepts the same instances as the CDDL rule

      root = tstr

   The JTD schema

      {&quot;type&quot;: &quot;timestamp&quot;}

   accepts the same instances as the CDDL rule

      root = tdate

   The JTD schema

      { &quot;elements&quot;: { &quot;type&quot;: &quot;float32&quot; }}

   accepts the same instances as the CDDL rule

      root = [* number]

   The JTD schema

      {
        &quot;properties&quot;: {
          &quot;a&quot;: { &quot;type&quot;: &quot;boolean&quot; },
          &quot;b&quot;: { &quot;type&quot;: &quot;float32&quot; }
        },
        &quot;optionalProperties&quot;: {
          &quot;c&quot;: { &quot;type&quot;: &quot;string&quot; },
          &quot;d&quot;: { &quot;type&quot;: &quot;timestamp&quot; }
        }
      }

   accepts the same instances as the CDDL rule

      root = { a: bool, b: number, ? c: tstr, ? d: tdate }

   The JTD schema

      { &quot;values&quot;: { &quot;type&quot;: &quot;float32&quot; }}

   accepts the same instances as the CDDL rule

      root = { * tstr =&gt; number }

   Finally, the JTD schema

      {
        &quot;discriminator&quot;: &quot;a&quot;,
        &quot;mapping&quot;: {
          &quot;foo&quot;: {
            &quot;properties&quot;: {
              &quot;b&quot;: { &quot;type&quot;: &quot;float32&quot; }
            }
          },
          &quot;bar&quot;: {
            &quot;properties&quot;: {
              &quot;b&quot;: { &quot;type&quot;: &quot;string&quot; }
            }
          }
        }
      }

   accepts the same instances as the CDDL rule

      root = { a: &quot;foo&quot;, b: number } / { a: &quot;bar&quot;, b: tstr }

<span class="h2"><a class="selflink" id="appendix-C" href="#appendix-C">Appendix C</a>.  Example</span>

   This appendix is not normative.

   As a demonstration of JTD, in Figure 4 is a JTD schema closely
   equivalent to the plain-English definition &quot;reputation-object&quot;
   described in <a href="/doc/html/rfc7071#section-6.2.2">Section&nbsp;6.2.2 of [RFC7071]</a>:

   {
     &quot;properties&quot;: {
       &quot;application&quot;: { &quot;type&quot;: &quot;string&quot; },
       &quot;reputons&quot;: {
         &quot;elements&quot;: {
           &quot;additionalProperties&quot;: true,
           &quot;properties&quot;: {
             &quot;rater&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;assertion&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;rated&quot;: { &quot;type&quot;: &quot;string&quot; },
             &quot;rating&quot;: { &quot;type&quot;: &quot;float32&quot; },
           },
           &quot;optionalProperties&quot;: {
             &quot;confidence&quot;: { &quot;type&quot;: &quot;float32&quot; },
             &quot;normal-rating&quot;: { &quot;type&quot;: &quot;float32&quot; },
             &quot;sample-size&quot;: { &quot;type&quot;: &quot;float64&quot; },
             &quot;generated&quot;: { &quot;type&quot;: &quot;float64&quot; },
             &quot;expires&quot;: { &quot;type&quot;: &quot;float64&quot; }
           }
         }
       }
     }
   }

         Figure 4: A JTD Schema Describing &quot;reputation-object&quot; from
                         <a href="/doc/html/rfc7071#section-6.2.2">Section&nbsp;6.2.2 of [RFC7071]</a>

   This schema does not enforce the requirement that &quot;sample-size&quot;,
   &quot;generated&quot;, and &quot;expires&quot; be unbounded positive integers.  It does
   not express the limitation that &quot;rating&quot;, &quot;confidence&quot;, and &quot;normal-
   rating&quot; should not have more than three decimal places of precision.

   The example in Figure 4 can be compared against the equivalent
   example in <a href="/doc/html/rfc8610#appendix-H">Appendix&nbsp;H of [RFC8610]</a>.

Acknowledgments

   Carsten Bormann provided lots of useful guidance and feedback on
   JTD&#x27;s design and the structure of this document.

   Evgeny Poberezkin suggested the addition of &quot;nullable&quot; and thoroughly
   vetted this document for mistakes and opportunities for
   simplification.

   Tim Bray suggested the current &quot;ref&quot; model and the addition of
   &quot;enum&quot;.  Anders Rundgren suggested extending &quot;type&quot; to have more
   support for numerical types.  James Manger suggested additional
   clarifying examples of how integer types work.  Adrian Farrel
   suggested many improvements to help make this document clearer.

   Members of the IETF JSON mailing list -- in particular, Pete Cordell,
   Phillip Hallam-Baker, Nico Williams, John Cowan, Rob Sayre, and Erik
   Wilde -- provided lots of useful feedback.

   OpenAPI&#x27;s &quot;discriminator&quot; object [<a href="#ref-OPENAPI" title="&quot;OpenAPI Specification&quot;">OPENAPI</a>] inspired the
   &quot;discriminator&quot; form.  [<a href="#ref-JSON-SCHEMA">JSON-SCHEMA</a>] influenced various parts of
   JTD&#x27;s early design.

Author&#x27;s Address

   Ulysse Carion
   Segment.io, Inc
   100 California Street
   San Francisco, CA 94111
   United States of America

   Email: ulysse@segment.com
</pre>
    </div>

  </div>


        
	  </div>

	

	

    </div>

      
      <script>$(".visible-nojs").removeClass("visible-nojs");</script>
      <script>$(".hidden-nojs").removeClass("hidden-nojs");</script>
      
    <script type="text/javascript"><!--
    var legend_html = "Colour legend:<br /> \
     <table> \
        <tr><td>Unknown:</td>                   <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Draft:</td>                     <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Informational:</td>             <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Experimental:</td>              <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Best Common Practice:</td>      <td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Proposed Standard:</td>         <td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Draft Standard (old designation):</td> <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Internet Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Historic:</td>                  <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
        <tr><td>Obsolete:</td>                  <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr> \
    </table>";
    function showLegend() {
        var elem = document.getElementById('legend');
        elem.innerHTML = legend_html
        elem.style.visibility='visible';
    }
    function hideLegend() {
        var elem = document.getElementById('legend');
        elem.style.visibility='hidden';
        elem.innerHTML = "";
    }
    // -->
    </script>

  </body>
</html>

